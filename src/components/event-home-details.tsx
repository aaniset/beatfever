/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/Rrrn6ExhPTO
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Archivo } from 'next/font/google'
import { IBM_Plex_Sans } from 'next/font/google'

archivo({
  subsets: ['latin'],
  display: 'swap',
})

ibm_plex_sans({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useEffect, useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Drawer,
  DrawerContent,
  DrawerHeader,
  DrawerTitle,
  DrawerDescription,
  DrawerFooter,
} from "@/components/ui/drawer";
import { CheckIcon, CopyIcon, InfoCircledIcon } from "@radix-ui/react-icons";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Separator } from "./ui/separator";
import { ModeToggle } from "./mode-toggle";
import TruncateText from "./turncat-text";
import { Tooltip, TooltipContent, TooltipTrigger } from "./ui/tooltip";

const event = {
  _id: {
    $oid: "668722ba7728615009d46415",
  },
  eventName: "Advanced bottom-line internet solution",
  eventDescription:
    "Accommodo nam ulterius dignissimos ea cultellus aliqua eaque sodalitas. Temeritas dicta amplitudo rerum alter tempore vito culpa quod avaritia. Adficio cohaero creo sunt.Accommodo nam ulterius dignissimos ea cultellus aliqua eaque sodalitas. Temeritas dicta amplitudo rerum alter tempore vito culpa quod avaritia. Adficio cohaero creo sunt.Accommodo nam ulterius dignissimos ea cultellus aliqua eaque sodalitas. Temeritas dicta amplitudo rerum alter tempore vito culpa quod avaritia. Adficio cohaero creo sunt.",
  eventFlyer: "https://picsum.photos/seed/Gvp2G/640/480",
  timings: [
    {
      date: {
        $date: "2024-10-07T20:32:11.839Z",
      },
      startTime: "13:56",
      endTime: "10:05",
    },
  ],
  eventId: "668722ba7728615009d46416",
  paymentGatewayFee: "organizer",
  platformFee: "organizer",
  ticketVariants: [
    {
      type: "General Entry",
      description: "Standard admission ticket",
      quantity: 334,
      remaining: 98,
      price: 82,
    },
    {
      type: "VIP Access",
      description: "VIP ticket with exclusive perks",
      quantity: 179,
      remaining: 36,
      price: 85,
    },
  ],
  venue: {
    venueName: "Koelpin - Gibson",
    country: "Austria",
    address: "1095 Kasey Extension",
    city: "Corytown",
    state: "Alabama",
    timeZone: "Europe/Saratov",
    capacity: 4622,
    mapsUrl: "https://maps.google.com",
  },
  hostEmail: "test@email.com",
};

export function EventHomeDetails() {
  const [isDrawerOpen, setIsDrawerOpen] = useState(false);
  const [hasCopied, setHasCopied] = useState(false);

  // const [selectedTickets, setSelectedTickets] = useState([
  //   { id: 1, name: "General Admission", price: 15, quantity: 1 },
  // ]);

  // const handleTicketQuantityChange = (index, quantity) => {
  //   setSelectedTickets((prevState) => {
  //     const updatedTickets = [...prevState];
  //     updatedTickets[index].quantity = quantity;
  //     return updatedTickets;
  //   });
  // };
  // const handleCheckout = () => {
  //   console.log("Checkout:", selectedTickets);
  //   setIsDrawerOpen(false);
  // };
  const [selectedTickets, setSelectedTickets] = useState([]);

  useEffect(() => {
    // Initialize selectedTickets based on event.ticketVariants
    setSelectedTickets(
      event.ticketVariants.map((variant) => ({
        ...variant,
        quantity: 0,
      }))
    );
  }, [event.ticketVariants]);

  const handleTicketQuantityChange = (index, quantity) => {
    setSelectedTickets((prevState) => {
      const updatedTickets = [...prevState];
      updatedTickets[index].quantity = Math.max(
        0,
        Math.min(quantity, updatedTickets[index].remaining)
      );
      return updatedTickets;
    });
  };

  const handleCheckout = () => {
    console.log(
      "Checkout:",
      selectedTickets.filter((ticket) => ticket.quantity > 0)
    );
    setIsDrawerOpen(false);
  };

  const totalPrice = selectedTickets.reduce(
    (total, ticket) => total + ticket.price * ticket.quantity,
    0
  );
  // Find the lowest price among ticket variants
  const lowestPrice = Math.min(
    ...event.ticketVariants.map((variant) => variant.price)
  );

  // Format date
  const eventDate = new Date(event.timings[0].date.$date);
  const formattedDate = eventDate.toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });

  const formatTime = (time) => {
    const [hours, minutes] = time.split(":");
    const formattedHours = hours % 12 || 12; // Convert to 12-hour format
    const ampm = hours >= 12 ? "PM" : "AM";
    return `${formattedHours}:${minutes} ${ampm}`;
  };

  const handleCopy = () => {
    const address = `${event.venue.address}, ${event.venue.city}, ${event.venue.state}, ${event.venue.country}`;
    navigator.clipboard.writeText(address).then(
      () => {
        setHasCopied(true);
        setTimeout(() => setHasCopied(false), 2000); // Clear message after 2 seconds
      },
      (err) => {
        console.error("Failed to copy address:", err);
      }
    );
  };

  return (
    <div className="relative flex w-full min-h-dvh items-center justify-center bg-background px-4 md:px-6">
      <div className="absolute top-[-100px] inset-0 z-0 h-3/4 w-full overflow-hidden">
        <img
          src="/test.avif" // Replace with your actual background image path
          alt="Background"
          className="w-full h-full object-cover object-center opacity-40 blur-[50px] left-[-100px] right-[-100px]"
        />
        <div className="absolute inset-0 bg-gradient-to-b from-transparent to-background opacity-100"></div>
      </div>
      <div className="container relative z-10 grid grid-cols-1 gap-8 py-12 md:grid-cols-3 md:gap-12 lg:gap-16">
        <div className=" md:sticky top-32 w-full aspect-square max-w-[600px] overflow-hidden rounded-xl md:col-span-1">
          <img
            src="/test.avif"
            alt="Event Flyer"
            width={600}
            height={600}
            className="w-full h-full object-cover object-center"
          />
        </div>
        <div className="flex flex-col items-start justify-center space-y-6 md:col-span-2 overflow-auto">
          <div className="space-y-2">
            <h1 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
              {event.eventName}
            </h1>

            <div className="mt-2 text-lg  font-semibold text-muted-foreground">
              {event.venue.venueName}
              <span className="mx-2">|</span>
              {formattedDate}
            </div>
            <div className="w-full pt-8">
              <Card className=" w-full shadow-none ">
                <CardContent className="flex items-center justify-between gap-4 p-6">
                  <div>
                    <div className="text-2xl font-bold">
                      From ${lowestPrice}
                    </div>
                    <p className="text-muted-foreground">
                      The price you'll pay. No surprises later.
                    </p>
                  </div>
                  <Button onClick={() => setIsDrawerOpen(true)}>Buy Now</Button>
                </CardContent>
              </Card>
            </div>
            <p className="pt-8 text-lg font-semibold md:text-3xl">About</p>
            <TruncateText text={event.eventDescription} maxLength={200} />
            {/* <p className="text-muted-foreground md:text-xl">
              This event will feature a variety of workshops, panels, and
              networking opportunities to help you explore new creative
              frontiers. This event will feature a variety of workshops, panels,
              and networking opportunities to help you explore new creative
              frontiers. This event will feature a variety of workshops, panels,
              and networking opportunities to help you explore new creative
              frontiers.
            </p>
            <Button variant="link">Read more</Button> */}
          </div>
          <div className="grid gap-4">
            <div className="flex items-center gap-2">
              <CalendarIcon className="h-5 w-5 text-primary" />
              <div>
                <p className="text-sm font-medium">Date</p>
                <p className="text-muted-foreground">{formattedDate}</p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <ClockIcon className="h-5 w-5 text-primary" />
              <div>
                <p className="text-sm font-medium">Time</p>
                <p className="text-muted-foreground">
                  {" "}
                  {formatTime(event.timings[0].startTime)} -{" "}
                  {formatTime(event.timings[0].endTime)}
                </p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <MapPinIcon className="h-5 w-5 text-primary" />
              <div>
                <p className="text-sm font-medium">Location</p>
                <p className="text-muted-foreground">
                  {event.venue.address}, {event.venue.city}, {event.venue.state}
                </p>
              </div>
            </div>
          </div>
          <div className="w-full border-t pt-6">
            <div className="space-y-4">
              <h2 className="text-2xl font-bold">Venue</h2>
              <div className="flex flex-col gap-2">
                <div className="flex items-center gap-2">
                  <h3 className="text-lg font-medium">
                    {event.venue.venueName}
                  </h3>
                </div>
                <div className="flex items-center gap-2">
                  <p className="text-muted-foreground">
                    {event.venue.address}, {event.venue.city},{" "}
                    {event.venue.state}, {event.venue.country}
                  </p>
                  {/* <Button
                    onClick={handleCopy}
                    variant="link"
                    size="sm"
                    className="flex items-center gap-1"
                  >
                    <CopyIcon className="h-4 w-4" />
                  </Button> */}
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant={"link"}
                        onClick={handleCopy}
                        className="flex items-center gap-1"
                      >
                        {hasCopied ? (
                          <CheckIcon className="mr-2 h-4 w-4" />
                        ) : (
                          <CopyIcon className="mr-2 h-4 w-4" />
                        )}
                        {/* {hasCopied ? "Copied" : "Copy"} */}
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent className="bg-black text-white">
                      Copy code
                    </TooltipContent>
                  </Tooltip>
                </div>
                <div className="flex items-center gap-2">
                  <ClockIcon className="h-5 w-5 text-primary" />
                  <div className="flex-1">
                    <p className="text-muted-foreground">
                      Doors Open at {formatTime(event.timings[0].startTime)} IST
                    </p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <InfoCircledIcon className="h-5 w-5 text-primary" />
                  <div className="flex-1">
                    <p className="text-muted-foreground">
                      {event.venue.capacity} capacity
                    </p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Button
                    onClick={() => window.open(event.venue.mapsUrl, "_blank")}
                    variant="outline"
                    size="sm"
                    className=" self-start flex items-center gap-1"
                  >
                    <MapPinIcon className="h-4 w-4" />
                    Open in maps
                  </Button>
                </div>
              </div>
            </div>
          </div>
          <div className="w-full border-t pt-6">
            <div className="space-y-4">
              <h2 className="text-2xl font-bold">Lineup</h2>
              {/* <div className="flex flex-col gap-2">
                <div className="flex items-center gap-2">
                  <div className="px-4">
                    <Separator
                      orientation="vertical"
                      className="h-8 text-primary"
                    />
                  </div>
                  <div className="flex-1">
                    <p className="text-sm font-medium">Doors Open</p>
                    <p className="text-muted-foreground">9:00 am GMT-7</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <div className="px-4">
                    <Separator
                      orientation="vertical"
                      className="h-8 text-primary"
                    />
                  </div>
                  <div className="flex-1">
                    <p className="text-sm font-medium">
                      Doors Open for 1st Show
                    </p>
                    <p className="text-muted-foreground">6:00 pm</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <div className="px-4">
                    <Separator
                      orientation="vertical"
                      className="h-8 text-primary"
                    />
                  </div>
                  <div className="flex-1">
                    <p className="text-sm font-medium">1st Show</p>
                    <p className="text-muted-foreground">7:00 pm</p>
                  </div>
                </div>
              </div> */}
              <div className="flex flex-col gap-2">
                {event.timings.map((timing, index) => (
                  <div key={index} className="flex flex-col gap-2">
                    <div className="flex items-center gap-2">
                      <div className="px-4">
                        <Separator
                          orientation="vertical"
                          className="h-8 text-primary"
                        />
                      </div>
                      <div className="flex-1">
                        <p className="text-sm font-medium">
                          {index + 1}st Day Start
                        </p>
                        <p className="text-muted-foreground">
                          Doors Open at {formatTime(timing.startTime)}
                        </p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="px-4">
                        <Separator
                          orientation="vertical"
                          className="h-8 text-primary"
                        />
                      </div>
                      <div className="flex-1">
                        <p className="text-sm font-medium">
                          {index + 1}st Day End
                        </p>
                        <p className="text-muted-foreground">
                          Ends at {formatTime(timing.endTime)}
                        </p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
          <div className="w-full border-t pt-6">
            <div className="space-y-4">
              <h2 className="text-2xl font-bold">FAQ</h2>
              <Accordion type="single" collapsible className="w-full">
                {/* <AccordionItem value="item-1">
                  <AccordionTrigger>Is it accessible?</AccordionTrigger>
                  <AccordionContent>
                    Yes. It adheres to the WAI-ARIA design pattern.
                  </AccordionContent>
                </AccordionItem>
                <AccordionItem value="item-2">
                  <AccordionTrigger>Is it styled?</AccordionTrigger>
                  <AccordionContent>
                    Yes. It comes with default styles that matches the other
                    components&apos; aesthetic.
                  </AccordionContent>
                </AccordionItem>
                <AccordionItem value="item-3">
                  <AccordionTrigger>Is it animated?</AccordionTrigger>
                  <AccordionContent>
                    Yes. It's animated by default, but you can disable it if you
                    prefer.
                  </AccordionContent>
                </AccordionItem> */}
                <AccordionItem value="item-1">
                  <AccordionTrigger>Are refunds available?</AccordionTrigger>
                  <AccordionContent>
                    No refunds after booking. Refunds for canceled events will
                    be managed by the organizer at their own discretion.
                    Contact: {event.hostEmail}
                  </AccordionContent>
                </AccordionItem>
                <AccordionItem value="item-2">
                  <AccordionTrigger>
                    Is alcohol or drugs allowed?
                  </AccordionTrigger>
                  <AccordionContent>
                    No, drugs and alcohol are strictly prohibited at the event.
                  </AccordionContent>
                </AccordionItem>
                <AccordionItem value="item-3">
                  <AccordionTrigger>
                    What is the age limit for the event?
                  </AccordionTrigger>
                  <AccordionContent>
                    The event is strictly for individuals aged 21 and above.
                  </AccordionContent>
                </AccordionItem>
                <AccordionItem value="item-4">
                  <AccordionTrigger>
                    What should I bring to the event?
                  </AccordionTrigger>
                  <AccordionContent>
                    Bring your ticket (digital or printed), a valid ID, and any
                    personal items you may need. Please avoid bringing
                    prohibited items such as drugs, alcohol, and weapons.
                  </AccordionContent>
                </AccordionItem>
                <AccordionItem value="item-8">
                  <AccordionTrigger>Is re-entry allowed?</AccordionTrigger>
                  <AccordionContent>
                    No, re-entry is not allowed once you leave the event
                    premises.
                  </AccordionContent>
                </AccordionItem>
              </Accordion>
            </div>
          </div>
          <ModeToggle />
        </div>
      </div>
      {/* <Drawer open={isDrawerOpen} onOpenChange={setIsDrawerOpen}>
        <DrawerContent className="w-full">
          <div className=" max-w-xl self-center">
            <DrawerHeader>
              <DrawerTitle>Select Tickets</DrawerTitle>
              <DrawerDescription>
                Choose the number of tickets you'd like to purchase.
              </DrawerDescription>
            </DrawerHeader>
            <div className="space-y-4 px-4">
              {selectedTickets.map((ticket, index) => (
                <div
                  key={ticket.id}
                  className="flex items-center justify-between"
                >
                  <div>
                    <p className="font-medium">{ticket.name}</p>
                    <p className="text-muted-foreground">
                      ${ticket.price.toFixed(2)}
                    </p>
                  </div>
                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={() =>
                        handleTicketQuantityChange(index, ticket.quantity - 1)
                      }
                      disabled={ticket.quantity <= 1}
                    >
                      <MinusIcon className="h-4 w-4" />
                    </Button>
                    <div className="w-12 text-center">{ticket.quantity}</div>
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={() =>
                        handleTicketQuantityChange(index, ticket.quantity + 1)
                      }
                    >
                      <PlusIcon className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
            <DrawerFooter>
              <div className="flex flex-col gap-4">
                <div className="flex items-center justify-between">
                  <p className="font-medium">
                    Total: $
                    {selectedTickets
                      .reduce(
                        (total, ticket) =>
                          total + ticket.price * ticket.quantity,
                        0
                      )
                      .toFixed(2)}
                  </p>
                </div>
                <Button onClick={handleCheckout} className="w-full">
                  Checkout
                </Button>
              </div>
            </DrawerFooter>
          </div>
        </DrawerContent>
      </Drawer> */}
      <Drawer open={isDrawerOpen} onOpenChange={setIsDrawerOpen}>
        <DrawerContent className="w-full">
          <div className="max-w-xl self-center">
            <DrawerHeader>
              <DrawerTitle>Select Tickets</DrawerTitle>
              <DrawerDescription>
                Choose the number of tickets you'd like to purchase.
              </DrawerDescription>
            </DrawerHeader>
            <div className="space-y-4 px-4">
              {selectedTickets.map((ticket, index) => (
                <div
                  key={ticket.type}
                  className="flex items-center justify-between"
                >
                  <div>
                    <p className="font-medium">{ticket.type}</p>
                    <p className="text-sm text-muted-foreground">
                      {ticket.description}
                    </p>
                    <p className="text-muted-foreground">
                      ₹{ticket.price.toFixed(2)}
                    </p>
                  </div>
                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={() =>
                        handleTicketQuantityChange(index, ticket.quantity - 1)
                      }
                      disabled={ticket.quantity <= 0}
                    >
                      <MinusIcon className="h-4 w-4" />
                    </Button>
                    <div className="w-12 text-center">{ticket.quantity}</div>
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={() =>
                        handleTicketQuantityChange(index, ticket.quantity + 1)
                      }
                      disabled={ticket.quantity >= ticket.remaining}
                    >
                      <PlusIcon className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
            <DrawerFooter>
              <div className="flex flex-col gap-4">
                <div className="flex items-center justify-between">
                  <p className="font-medium">Total: ₹{totalPrice.toFixed(2)}</p>
                </div>
                <Button
                  onClick={handleCheckout}
                  className="w-full"
                  disabled={totalPrice === 0}
                >
                  Checkout
                </Button>
              </div>
            </DrawerFooter>
          </div>
        </DrawerContent>
      </Drawer>
    </div>
  );
}

function CalendarIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M8 2v4" />
      <path d="M16 2v4" />
      <rect width="18" height="18" x="3" y="4" rx="2" />
      <path d="M3 10h18" />
    </svg>
  );
}

function ClockIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <polyline points="12 6 12 12 16 14" />
    </svg>
  );
}

function FileQuestionIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 17h.01" />
      <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z" />
      <path d="M9.1 9a3 3 0 0 1 5.82 1c0 2-3 3-3 3" />
    </svg>
  );
}

function MapPinIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z" />
      <circle cx="12" cy="10" r="3" />
    </svg>
  );
}

function MinusIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
    </svg>
  );
}

function PlusIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  );
}

function XIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  );
}
