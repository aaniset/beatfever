// /**
//  * This code was generated by v0 by Vercel.
//  * @see https://v0.dev/t/6bxjdmP5GFD
//  * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
//  */

// /** Add fonts into your Next.js project:

// import { Inter } from 'next/font/google'

// inter({
//   subsets: ['latin'],
//   display: 'swap',
// })

// To read more about using these font, please visit the Next.js documentation:
// - App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
// - Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
// **/
// "use client";

// import { useEffect, useState } from "react";
// import { Badge } from "@/components/ui/badge";
// import {
//   Popover,
//   PopoverTrigger,
//   PopoverContent,
// } from "@/components/ui/popover";
// import { Button } from "@/components/ui/button";
// import { Calendar } from "@/components/ui/calendar";
// import { Label } from "@/components/ui/label";
// import { Input } from "@/components/ui/input";
// import { FormLabel } from "./ui/form";

// export function InputTimings({ setValue, timings }: any) {
//   // const [dates, setDates] = useState([
//   //   {
//   //     date: new Date(),
//   //     startTime: null,
//   //     endTime: null,
//   //   },
//   // ]);
//   const [dates, setDates] = useState(timings);
//   useEffect(() => {
//     setDates(timings)
//   }, [timings,]);

//   const addDate = () => {
//     setDates([
//       ...dates,
//       {
//         date: new Date(),
//         startTime: null,
//         endTime: null,
//       },
//     ]);
//     setValue("timings", dates);
//   };
//   const removeDate = (index) => {
//     if (dates.length > 1) {
//       const newDates = [...dates];
//       newDates.splice(index, 1);
//       setDates(newDates);
//       setValue("timings", dates);

//       console.log("remove", dates);
//     }
//   };
//   const updateDate = (index, field, value) => {
//     const newDates = [...dates];
//     newDates[index][field] = value;
//     setDates(newDates);
//     setValue("timings", dates);
//     console.log("update", dates);
//   };
//   return (
//     <div className="grid gap-6 py-4">
//       <div className="grid gap-4">
//         {dates.map((date, index) => (
//           <div
//             key={index}
//             className="grid grid-cols-[1fr_auto] items-center gap-4 bg-muted rounded-md p-4"
//           >
//             <div className="grid gap-2">
//               <div className="flex items-center gap-2">
//                 {/* <Badge className="px-2 py-1 text-xs font-medium rounded-md bg-primary text-primary-foreground">
//                   Day {index + 1}
//                 </Badge> */}
//                 <Popover>
//                   <PopoverTrigger asChild>
//                     <Button
//                       variant="outline"
//                       className="flex-col items-start w-full h-auto"
//                     >
//                       <span className="font-semibold uppercase text-[0.65rem]">
//                         Date
//                       </span>
//                       <span className="font-normal">
//                         {date.date?.toLocaleDateString()}
//                       </span>
//                     </Button>
//                   </PopoverTrigger>
//                   <PopoverContent className="p-0 max-w-[276px]">
//                     <Calendar
//                       mode="single"
//                       selected={date.date}
//                       onSelect={(newDate) => updateDate(index, "date", newDate)}
//                     />
//                   </PopoverContent>
//                 </Popover>
//               </div>
//               <div className="grid sm:grid-cols-2 gap-2">
//                 <div className="grid gap-1">
//                   <FormLabel
//                     className="font-semibold uppercase text-[0.65rem]"
//                     htmlFor={`start-time-${index}`}
//                   >
//                     Start Time
//                   </FormLabel>
//                   <Input
//                     id={`start-time-${index}`}
//                     type="time"
//                     value={date.startTime ||  }
//                     onChange={(e) =>
//                       updateDate(index, "startTime", e.target.value)
//                     }
//                   />
//                 </div>
//                 <div className="grid gap-1">
//                   <FormLabel
//                     className="font-semibold uppercase text-[0.65rem]"
//                     htmlFor={`end-time-${index}`}
//                   >
//                     End Time
//                   </FormLabel>
//                   <Input
//                     id={`end-time-${index}`}
//                     type="time"
//                     value={date.endTime || ""}
//                     onChange={(e) =>
//                       updateDate(index, "endTime", e.target.value)
//                     }
//                   />
//                 </div>
//               </div>
//             </div>
//             <Button
//               variant="ghost"
//               type="button"
//               size="icon"
//               className="w-6 h-6 hover:bg-transparent text-muted-foreground hover:text-red-500"
//               onClick={() => removeDate(index)}
//             >
//               <TrashIcon className="w-4 h-4" />
//               <span className="sr-only">Remove date</span>
//             </Button>
//           </div>
//         ))}
//       </div>
//       <Button type="button" variant="outline" onClick={addDate}>
//         <PlusIcon className="w-4 h-4 mr-2" />
//         Add Date
//       </Button>
//     </div>
//   );
// }

// function PlusIcon(props) {
//   return (
//     <svg
//       {...props}
//       xmlns="http://www.w3.org/2000/svg"
//       width="24"
//       height="24"
//       viewBox="0 0 24 24"
//       fill="none"
//       stroke="currentColor"
//       strokeWidth="2"
//       strokeLinecap="round"
//       strokeLinejoin="round"
//     >
//       <path d="M5 12h14" />
//       <path d="M12 5v14" />
//     </svg>
//   );
// }

// function TrashIcon(props) {
//   return (
//     <svg
//       {...props}
//       xmlns="http://www.w3.org/2000/svg"
//       width="24"
//       height="24"
//       viewBox="0 0 24 24"
//       fill="none"
//       stroke="currentColor"
//       strokeWidth="2"
//       strokeLinecap="round"
//       strokeLinejoin="round"
//     >
//       <path d="M3 6h18" />
//       <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
//       <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
//     </svg>
//   );
// }

// "use client"

// import { useState } from "react"
// import { Badge } from "@/components/ui/badge"
// import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover"
// import { Button } from "@/components/ui/button"
// import { Calendar } from "@/components/ui/calendar"
// import { Label } from "@/components/ui/label"
// import { Input } from "@/components/ui/input"
// import { Trash as TrashIcon, PlusCircle as PlusIcon } from "lucide-react"

// interface DateTiming {
//   date: Date;
//   startTime: string | null;
//   endTime: string | null;
// }

// interface InputTimingsProps {
//   dates: DateTiming[];
//   setDates: (dates: DateTiming[]) => void;
// }

// export default function InputTimings({ dates, setDates }: InputTimingsProps) {
//   const addDate = () => {
//     setDates([
//       ...dates,
//       {
//         date: new Date(),
//         startTime: null,
//         endTime: null,
//       },
//     ])
//   }

//   const removeDate = (index: number) => {
//     if (dates.length > 1) {
//       const newDates = [...dates]
//       newDates.splice(index, 1)
//       setDates(newDates)
//     }
//   }

//   const updateDate = (index: number, field: keyof DateTiming, value: any) => {
//     const newDates = [...dates]
//     newDates[index][field] = value
//     setDates(newDates)
//   }

//   return (
//     <div className="grid gap-6">
//       <div className="grid gap-4">
//         {dates.map((date, index) => (
//           <div key={index} className="grid grid-cols-[1fr_auto] items-center gap-4 bg-muted rounded-md p-4">
//             <div className="grid gap-2">
//               <div className="flex items-center gap-2">
//                 <Badge className="px-2 py-1 text-xs font-medium rounded-md bg-primary text-primary-foreground">
//                   Day {index + 1}
//                 </Badge>
//                 <Popover>
//                   <PopoverTrigger asChild>
//                     <Button variant="outline" className="flex-col items-start w-full h-auto">
//                       <span className="font-semibold uppercase text-[0.65rem]">Date</span>
//                       <span className="font-normal">{date.date.toLocaleDateString()}</span>
//                     </Button>
//                   </PopoverTrigger>
//                   <PopoverContent className="p-0 max-w-[276px]">
//                     <Calendar
//                       mode="single"
//                       selected={date.date}
//                       onSelect={(newDate) => updateDate(index, "date", newDate)}
//                     />
//                   </PopoverContent>
//                 </Popover>
//               </div>
//               <div className="grid sm:grid-cols-2 gap-2">
//                 <div className="grid gap-1">
//                   <Label htmlFor={`start-time-${index}`}>Start Time</Label>
//                   <Input
//                     id={`start-time-${index}`}
//                     type="time"
//                     value={date.startTime || ""}
//                     onChange={(e) => updateDate(index, "startTime", e.target.value)}
//                   />
//                 </div>
//                 <div className="grid gap-1">
//                   <Label htmlFor={`end-time-${index}`}>End Time</Label>
//                   <Input
//                     id={`end-time-${index}`}
//                     type="time"
//                     value={date.endTime || ""}
//                     onChange={(e) => updateDate(index, "endTime", e.target.value)}
//                   />
//                 </div>
//               </div>
//             </div>
//             <Button
//               variant="ghost"
//               size="icon"
//               className="w-6 h-6 hover:bg-transparent text-muted-foreground hover:text-red-500"
//               onClick={() => removeDate(index)}
//             >
//               <TrashIcon className="w-4 h-4" />
//               <span className="sr-only">Remove date</span>
//             </Button>
//           </div>
//         ))}
//       </div>
//       <Button variant="outline" onClick={addDate}>
//         <PlusIcon className="w-4 h-4 mr-2" />
//         Add Date
//       </Button>
//     </div>
//   )
// }
/**
 * v0 by Vercel.
 * @see https://v0.dev/t/6bxjdmP5GFD
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
"use client";

import { useState } from "react";
import { Badge } from "@/components/ui/badge";
import {
  Popover,
  PopoverTrigger,
  PopoverContent,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";

export default function InputTimings({ dates, setDates, setValue }) {
  // const [dates, setDates] = useState([
  //   {
  //     date: new Date(),
  //     startTime: null,
  //     endTime: null,
  //   },
  // ])
  const addDate = () => {
    setDates([
      ...dates,
      {
        date: new Date(),
        startTime: null,
        endTime: null,
      },
    ]);
    setValue("timings", [
      ...dates,
      {
        date: new Date(),
        startTime: null,
        endTime: null,
      },
    ]);
  };
  const removeDate = (index) => {
    if (dates.length > 1) {
      const newDates = [...dates];
      newDates.splice(index, 1);
      setDates(newDates);
      setValue("timings", dates);
    }
  };
  const updateDate = (index, field, value) => {
    const newDates = [...dates];
    newDates[index][field] = value;
    setDates(newDates);
    setValue("timings", dates);
  };
  console.log("dates", dates);
  return (
    <div className="grid gap-6">
      <div className="grid gap-4">
        {dates?.map((date, index) => (
          <div
            key={index}
            className="grid grid-cols-[1fr_auto] items-center gap-4 bg-muted rounded-md p-4"
          >
            <div className="grid gap-2">
              <div className="flex items-center gap-2">
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      type="button"
                      variant="outline"
                      className="flex-col items-start w-full h-auto"
                    >
                      <span className="font-semibold uppercase text-[0.65rem]">
                        Date
                      </span>
                      <span className="font-normal">
                        {date.date.toLocaleDateString()}
                      </span>
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="p-0 max-w-[276px]">
                    <Calendar
                      mode="single"
                      selected={date.date}
                      onSelect={(newDate) => updateDate(index, "date", newDate)}
                    />
                  </PopoverContent>
                </Popover>
              </div>
              <div className="grid sm:grid-cols-2 gap-2">
                <div className="grid gap-1">
                  <Label htmlFor={`start-time-${index}`}>Start Time</Label>
                  <Input
                    id={`start-time-${index}`}
                    type="time"
                    value={date.startTime || ""}
                    onChange={(e) =>
                      updateDate(index, "startTime", e.target.value)
                    }
                  />
                </div>
                <div className="grid gap-1">
                  <Label htmlFor={`end-time-${index}`}>End Time</Label>
                  <Input
                    id={`end-time-${index}`}
                    type="time"
                    value={date.endTime || ""}
                    onChange={(e) =>
                      updateDate(index, "endTime", e.target.value)
                    }
                  />
                </div>
              </div>
            </div>
            <Button
              type="button"
              variant="ghost"
              size="icon"
              className="w-6 h-6 hover:bg-transparent text-muted-foreground hover:text-red-500"
              onClick={() => removeDate(index)}
            >
              <TrashIcon className="w-4 h-4" />
              <span className="sr-only">Remove date</span>
            </Button>
          </div>
        ))}
      </div>
      <Button type="button" variant="outline" onClick={addDate}>
        <PlusIcon className="w-4 h-4 mr-2" />
        Add Date
      </Button>
    </div>
  );
}

function PlusIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  );
}

function TrashIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>
  );
}
