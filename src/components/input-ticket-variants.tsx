// /**
//  * This code was generated by v0 by Vercel.
//  * @see https://v0.dev/t/iBuirH2wL5B
//  * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
//  */

// /** Add fonts into your Next.js project:

// import { Inter } from 'next/font/google'

// inter({
//   subsets: ['latin'],
//   display: 'swap',
// })

// To read more about using these font, please visit the Next.js documentation:
// - App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
// - Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
// **/
"use client";

import { useState } from "react";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";import { zodResolver } from "@hookform/resolvers/zod";
import { useForm, useFieldArray, SubmitHandler } from "react-hook-form";
import {
  Popover,
  PopoverTrigger,
  PopoverContent,
} from "@/components/ui/popover";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";

export function  TicketVariantForm({ form }: any) {
  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "ticketVariants",
  });

  const [newVariant, setNewVariant] = useState({
    type: "",
    description: "",
    price: "",
    quantity: "",
    remaining: "",
  });
  const [showPopover, setShowPopover] = useState(false);
  const [editingIndex, setEditingIndex] = useState(null);

  const addVariant = () => {
    setEditingIndex(null);
    setShowPopover(true);
  };

  const editVariant = (index: any) => {
    setEditingIndex(index);
    setNewVariant(form.getValues(`ticketVariants.${index}`));
    setShowPopover(true);
  };

  const saveVariant = () => {
    if (editingIndex !== null) {
      form.setValue(`ticketVariants.${editingIndex}`, newVariant);
    } else {
      append(newVariant);
    }
    setNewVariant({
      type: "",
      description: "",
      price: "",
      quantity: "",
      remaining: "",
    });
    setShowPopover(false);
    setEditingIndex(null);
  };

  const removeVariant = (index: any) => {
    remove(index);
  };

  return (
    <div className="w-full max-w-4xl">
      <CardHeader>
        <CardTitle>Ticket Variants</CardTitle>
        <CardDescription>
          Customize the ticket variants for your event.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid gap-4">
          {fields.map((field, index) => (
            <FormField
              key={field.id}
              control={form.control}
              name={`ticketVariants.${index}`}
              render={({ field: formField }) => (
                <FormItem className="flex items-center justify-between gap-4 rounded-lg border p-4">
                  <div className="flex items-center gap-4">
                    <Badge variant="outline">${formField.value.price}</Badge>
                    <div className="grid gap-1">
                      <div className="text-lg font-semibold">
                        {formField.value.type}
                      </div>
                      <div className="text-sm text-muted-foreground">
                        {formField.value.remaining} of{" "}
                        {formField.value.quantity} remaining
                      </div>
                      <div className="text-sm text-muted-foreground">
                        {formField.value.description}
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Button
                    type="button"
                      variant="outline"
                      onClick={() => editVariant(index)}
                      className="shrink-0"
                    >
                      Edit
                    </Button>
                    <Button
                    type="button"
                      variant="outline"
                      onClick={() => removeVariant(index)}
                      className="shrink-0"
                    >
                      Remove
                    </Button>
                  </div>
                </FormItem>
              )}
            />
          ))}
          <Button type="button" variant="outline" onClick={addVariant}>
            Add New Variant
          </Button>
        </div>
      </CardContent>
      <Popover open={showPopover}>
        <PopoverTrigger asChild>
          <div />
        </PopoverTrigger>
        <PopoverContent className="w-[400px] p-6 space-y-4">
          <FormField
            control={form.control}
            name="type"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Ticket Name</FormLabel>
                <FormControl>
                  <Input
                    {...field}
                    value={newVariant.type}
                    onChange={(e) =>
                      setNewVariant({ ...newVariant, type: e.target.value })
                    }
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="description"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Description</FormLabel>
                <FormControl>
                  <Textarea
                    {...field}
                    value={newVariant.description}
                    onChange={(e) =>
                      setNewVariant({
                        ...newVariant,
                        description: e.target.value,
                      })
                    }
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <div className="grid grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="price"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Price</FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      type="number"
                      value={newVariant.price}
                      onChange={(e) =>
                        setNewVariant({ ...newVariant, price: e.target.value })
                      }
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="quantity"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Quantity</FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      type="number"
                      value={newVariant.quantity}
                      onChange={(e) =>
                        setNewVariant({
                          ...newVariant,
                          quantity: e.target.value,
                        })
                      }
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <FormField
            control={form.control}
            name="remaining"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Remaining</FormLabel>
                <FormControl>
                  <Input
                    {...field}
                    type="number"
                    value={newVariant.remaining}
                    onChange={(e) =>
                      setNewVariant({
                        ...newVariant,
                        remaining: e.target.value,
                      })
                    }
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <div className="flex justify-end gap-2">
            <Button type ="button" variant="outline" onClick={() => setShowPopover(false)}>
              Cancel
            </Button>
            <Button type="button" onClick={saveVariant}>
              {editingIndex !== null ? "Save Changes" : "Save"}
            </Button>
          </div>
        </PopoverContent>
      </Popover>
    </div>
  );
}